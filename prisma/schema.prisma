generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String?

  bio      String?
  github   String?
  location String?

  accounts Account[]
  sessions Session[]

  likes                 Like[]
  points                Points[]
  receivedNotifications Notification[] @relation("Recipient")
  issuedNotifications   Notification[] @relation("Issuer")
  comments              Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts Post[]

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Post {
  id          String     @id @default(cuid())
  title       String
  description String
  externalUrl String
  creator     String
  type        PostType   @default(FREE)
  format      PostFormat @default(OTHERS)
  level       PostLevel  @default(BEGINNER)
  language    String
  year        Int
  tags        String[]

  approved        Boolean @default(false)
  pendingApproval Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  likes         Like[]
  notifications Notification[]
  points        Points[]
  comments      Comment[]

  @@index([userId])
  @@map("posts")
}

model Like {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

model Notification {
  id          String           @id @default(cuid())
  recipientId String
  recipient   User             @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  issuerId    String
  issuer      User             @relation("Issuer", fields: [issuerId], references: [id], onDelete: Cascade)
  postId      String?
  post        Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  type        NotificationType
  read        Boolean          @default(false)
  comment     Comment?         @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId   String?          @map("commentId") // Optional for flexibility

  createdAt DateTime @default(now())

  @@map("notifications")
}

model Points {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  points       Int
  createdAt    DateTime           @default(now())
  activityType PointsActivityType

  post   Post?   @relation(fields: [postId], references: [id], onDelete: SetNull)
  postId String?

  @@map("points")
}

model Comment {
  id String @id @default(cuid()) @map("_id")

  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("userId")

  post   Post   @relation(fields: [postId], references: [id])
  postId String

  parent   Comment? @relation("ParentChild", fields: [parentId], references: [id])
  parentId String?

  children      Comment[]      @relation("ParentChild")
  notifications Notification[]

  @@index([userId, postId])
  @@map("comments")
}

enum PostType {
  FREE
  NO_REGISTRATION
  PAID
  SUBSCRIPTION
}

enum PostFormat {
  VIDEO
  ARTICLE
  COURSE
  OTHERS
}

enum PostLevel {
  BEGINNER
  INTERMEDIATE
  PROGRESSED
  ADVANCED
}

enum NotificationType {
  LIKE
  FOLLOW
  COMMENT
  REPLY
}

enum PointsActivityType {
  POST_CREATION
  COMMENT
  LIKE_RECEIVED
  FOLLOWER_GAIN
}
