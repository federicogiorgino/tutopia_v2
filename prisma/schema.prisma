generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String?

  bio      String?
  github   String?
  location String?

  accounts Account[]
  sessions Session[]

  likes     Like[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts Post[]

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Post {
  id          String     @id @default(cuid())
  title       String
  description String
  externalUrl String
  creator     String
  type        PostType   @default(FREE)
  format      PostFormat @default(OTHERS)
  level       PostLevel  @default(BEGINNER)
  language    String
  year        Int
  tags        String[]

  approved        Boolean @default(false)
  pendingApproval Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  likes Like[]

  @@index([userId])
  @@map("posts")
}

model Like {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

enum PostType {
  FREE
  NO_REGISTRATION
  PAID
  SUBSCRIPTION
}

enum PostFormat {
  VIDEO
  ARTICLE
  COURSE
  OTHERS
}

enum PostLevel {
  BEGINNER
  INTERMEDIATE
  PROGRESSED
  ADVANCED
}
